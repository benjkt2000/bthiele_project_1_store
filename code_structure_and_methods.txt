Main.py
    - Login Authentication
    - Route user to appropriate menu
    - Loop back to Login Menu until user closes program

Views.py
    - Functions that represent user menus

Util.py
    - Any other various functions required such as 
        inventory management:
            display_items()
            add_item()
            remove_item()
                - Requries all customers carts to be scanned and inventory updated
                - retrieve all customers
                - loop though each customer and their cart, update item quantity to zero
            update_item_quantity()
                - Make sure item amount is not negative
            get_list_of_items()
                - Sort by date
                - wrap each item in object

        retrieve_all_transactions()
            - query database for transactions
            - print in tabular format and sorted by date
            - calculate total profits
DAO
    -  All needed CRUD operations/queries

    Need queries that:
        Cart:
        - Get all items from database
        - Add item to user's cart via user_id
        - Delete user cart via user_id
        - Update item in users cart via item_id and user_id
        - Remove item in users cart via item-id and user_id
        - 
        - Add transaction to database
        Account:
        - Retrieve all transactions via user_id
         - Retrieve an account from database
        - Update username in database by user_id
        - Update first name in database by user_id
        - Update password in database by user_id
        - Update admin status in database by user_id 
        Item:
        - Update item in database by item_id
        
        Misc:
        - Add item to database
        - Remove item from database by item_id
        - Retrieve all accounts from database
        - Query a user by username
        - retrieve_all_items
        - retrieve_all_transactions
        

 
        
MODEL    
    Cart.py
        - Class to model user's shopping cart
        - Include user ID
        - Includes dict of {item(object) : quantity} to represent cart
        - Includes dict of {item(object) : quantity} to represent catalog
        - Includes transaction total

        Methods:
            - def __init__(user_id: int, items: dict)
                - takes in user_id, dict of {item_id: quantity}
                - Will query for all items in database, wrap them in item objects and assign to dictionary
                - Will search catalog for all items in cart, copy item object, and assign quantity. Save in dictionary.
                - Will calculate transaction total using dict of {item(object) : quantity} 

            - show_cart()
                - Displays cart in tablular format (item, price, quantity)
                - Prints Total

            - show_catalog()
                - Displays catalog in tabular format

            - calculate_total(items: dict)
                - Takes in a dictionary of items and calculates total cost

            - add_item_to_cart(item_id: int, quantity: int)
                - lookup item in catalog
                    - if does not exist return False
                - Check if quantity exceeds inventory
                    - if so, return False 
                - Add item to cart and assign quantity
                    - Update item in catalog
                    - Update item in database
                    - Update Cart in database
                    - return True if successfully added

            - clear_cart()
                - Update item objects in catalog and update counts in database
                - Erase contents of cart
                - update_cart_in_database (send empty cart)
                - Return True

            - update_item_quantity(item_id: int)
                - Check if item exists in cart
                    - if not, return False
                - if item quanity is zero
                    - update item object and item in database
                    - remove item from cart and update in database
                    - Return True           
                - Check if item count exceeds database count
                    - if so, return False
                - Update Cart and Item inventory both in objects and database
                    - return True

            - check_if_item_exists_in_cart(item_id: int)
                - search dict of items and confirm if it exists

            - check_if_item_exists_in_catalog(item_id: int)
                - Check if exists in catalog
                    if so, return True
                    if not, return False

            - update_cart_in_database
                - Will update cart in database

            - checkout_items()
                - Create transaction object (id, user_id, date, items, total_cost)
                - Clear Cart

    Account.py
        - Class to model user accounts
        - Include:
            - user_id
            - username
            - password
            - first_name
            - last_name
            - admin_status: True/False
            - list of transactions(Query transactions table via user_id) 
            - Shopping Cart Object 

        Methods:
        def __init__(account: json/dict) NOTE: Unknown if will take in a json/Object
            - assign all basic account fields
            - query for a list of transactions
            - instantiate a cart object

        get_account_transactions(user_id: int)
            - query transactions via user_id
            - (perhaps transform JSON into list or whatever will be used to print in tabular format)
            - return list of transactions

        show_account_info()
            - print all user info in tabular format

        update_username(new_username: str)
            - query database to make sure username does not exist 
                - if so, return False
            
            - assign username to object
            - update username in database
            - return True

        update_first_name(new_first_name: str)
            - assign new first name to object
            - update first name in database
            - return True

        update_last_name(new_last_name: str)
            - assign new last name to object
            - update last name in database
            - return True

        update_password(new_password: str)
            - assign new password to object
            - update password to database
            - return True

        update_admin_status(status: bool)
            - set the admin status to bool
            - return True


        view_all_transactions()
            - Print all transactions 
            NOTE: need to find good way to format all data. probably print in blocks

        get_cart()
            - return a copy of users cart 

        set_cart()?? NOTE: May not need to because of pass by reference



    Item.py
        - Class to model an item in the inventory
        - Include:
            - item_id
            - item_name
            - price
            - current_inventory

        Methods:
        def __init__(id: int, name: str, quanity: int, price: float)
        print_item_details()
            - print item details 
        get_id()
        get_name()
        get_price()
        get_current_inventory()
        set_current_inventory()
        update_item()
            - will update item in database





