Main.py
    - Login Authentication
    - Route user to appropriate menu
    - Loop back to Login Menu until user closes program

Views.py
    - Functions that represent user menus

Util.py
    - Any other various functions required such as 
        inventory management:
            *display_items()
            *add_item()
            *remove_item()
                - Requries all customers carts to be scanned and inventory updated
                - retrieve all customers
                - loop though each customer and their cart, update item quantity to zero
            *update_item_quantity()
                - Make sure item amount is not negative and is greater than current_inventory
            *get_list_of_items()
                - wrap each item in object

        *retrieve_all_transactions()
            - query database for transactions
            - print in tabular format and sorted by date
            - calculate total profits

            ??? Make new find max transaction id outside of DAO? Update checkout method

        *add_account() 
        *check_if_user_exists() (Make sure every user_id is unique)
        *delete_account_by_id() 
        *retrieve_all_users()
        *display_all_users()

        Validation:
        *validate_credentials(username: str, password: str)

DAO
    -  All needed CRUD operations/queries

    Need queries that:
        Cart:
        *- Get all items from database
            - db.items.find()
        *- Add item to user's cart via user_id
            - db.accounts.updateOne({user_id: value}, {$push: {current_transaction: {item_id: value , quantity: value}}})
        *- Delete user cart via user_id
            - db.accounts.updateOne({user_id: value}, {$unset: {current_transaction: ""}})
        *- Update item in users cart via item_id and user_id
            - db.accounts.updateOne({user_id: value, "current_transaction.item_id": value}, {$set: {"current_transaction.$.quantity": value}})
        *- Remove item in users cart via item-id and user_id
            - db.accounts.updateOne({user_id: value, "current_transaction.item_id": value}, {$unset: {"current_transaction.$": ""}})
        *- Clean up nulls in shopping cart post remove operation
            - db.accounts.updateOne({user_id: value, }, {$pull: {current_transaction: null}})
        *- Add transaction to database
        
        Account:

        *- Retrieve all transactions via user_id
            db.transactions.find({user_id: "value"})

        *- Retrieve a users cart
            db.accounts.findOne({user_id: value},{current_transaction: 1})
        
        *- Update username in database by user_id
            db.accounts.updateOne({user_id: "value"}, {$set: {username: "value"}})

        *- Update first name in database by user_id
            -db.accounts.updateOne({user_id: "value"}, {$set: {first_name: "value"}})

        *- Update last name in database by user_id
            -db.accounts.updateOne({user_id: "value"}, {$set: {last_name: "value"}})
        
        *- Update password in database by user_id
            -db.accounts.updateOne({user_id: "value"}, {$set: {password: "value"}})

        *- Update admin status in database by user_id  
            -db.accounts.updateOne({user_id: "value"}, {admin: "true/false"})


        Item:
        *- Update item quanity in database by item_id
            - db.items.updateOne({item_id: value},{current_inventory: value})

        
        Misc:
        - Create database
            *- use groceryStore
            *- db.createCollection('accounts')
            *- db.createCollection('items)
            - db.createCollection('transactions) 
        
        - Inventory Related Operations
            - *Add itemto database
                - db.items.insertOne({})
            - *Delete item from database
                - db.items.deleteOne({item_id: value})
            - *Retrieve all items from database
                - db.items.find()
            
          - Transaction Based Operations
            *- db.transactions.find() 
            *- db.transactions.aggregate([{$group:{_id: null, maxField: {$max: "$transaction_id"}}}])

        
        - Universal Account Operations
            *- db.accounts.insertOne({})
            *- db.accounts.insertMany([])
            *- db.accounts.aggregate([{$group:{_id: null, maxField: {$max: "$user_id"}}}])
            *- db.accounts.deleteOne({id: 4})
            *- db.accounts.findOne({user_id: value})
            *- db.accounts.find()

       
MODEL    
    Cart.py
        - Class to model user's shopping cart
        - Include user ID
        - Includes list of {item_id :, quantity: } to represent cart
        - Includes dict of {item_id = item(object)} to represent catalog
        - Includes transaction total

        Methods:
            *- def __init__(user_id: int, items: list)
                - takes in user_id, list of {item_id: quantity}
                - Will query for all items in database, wrap them in item objects and assign to dict
                - Will query for the users current cart and save list as instance variable
                - Will calculate transaction total using list of {item_id: quantity:} 

            * - show_cart()
                - Displays cart in tablular format (item, price, quantity)
                - Prints Total

            *- show_item_catalog()
                - Displays catalog in tabular format

            *- calculate_total(items: dict)
                - Takes in a dictionary of items and calculates total cost

            *- add_item_to_cart(item_id: int, quantity: int)
                - lookup item in catalog
                    - if does not exist return False
                - Check if quantity exceeds inventory
                    - if so, return False 
                - Add item to cart and assign quantity
                    - Update item in catalog
                    - Update item in database
                    - Update Cart in database
                    - return True if successfully added

            *- clear_cart()
                - Update item objects in catalog and update counts in database
                - Erase contents of cart
                - update_cart_in_database (send empty cart)
                - Return True

            *- update_item_quantity(item_id: int, quantity: int)
                - Check if item exists in cart
                    - if not, return False
                - if item quanity is zero
                    - update item object and item in database
                    - remove item from cart and update in database
                    - Return True           
                - Check if item count exceeds database count
                    - if so, return False
                - Update Cart and Item inventory both in objects and database
                    - return True

            *- checkout_items()
                - Create transaction object (id, user_id, date, items, total_cost)
                - Clear Cart

    Account.py
        - Class to model user accounts
        - Include:
            - user_id
            - username
            - password
            - first_name
            - last_name
            - admin_status: True/False
            - list of transactions(Query transactions table via user_id) 
            - Shopping Cart Object 

        Methods:
        *def __init__(account: json/dict) NOTE: Unknown if will take in a json/Object
            - assign all basic account fields
            - query for a list of transactions
            - instantiate a cart object

        *get_account_transactions(user_id: int)
            - query transactions via user_id
            - (perhaps transform JSON into list or whatever will be used to print in tabular format)
            - return list of transactions

        *show_account_info()
            - print all user info 

        *change_username(new_username: str)
            
            - assign username to object
            - update username in database
            - return True

        *change_first_name(new_first_name: str)
            - assign new first name to object
            - update first name in database
            - return True

        *change_last_name(new_last_name: str)
            - assign new last name to object
            - update last name in database
            - return True

        *change_password(new_password: str)
            - assign new password to object
            - update password to database
            - return True

        *change_admin_status(status: bool)
            - set the admin status to bool
            - return True


        *view_all_transactions()
            - Print all transactions 

    Item.py
        - Class to model an item in the inventory
        - Include:
            - item_id
            - item_name
            - price
            - current_inventory

        Methods:
        *def __init__(id: int, name: str, quanity: int, price: float)
        *print_item_details()
            - print item details 
        *get_id()
        *get_item_name()
        *get_price()
        *get_current_inventory()
        *update_item()
            - will update item inventory in database and object





