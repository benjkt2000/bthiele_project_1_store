Main.py
    - Login Authentication
    - Route user to appropriate menu
    - Loop back to Login Menu until user closes program

Views.py
    - Functions that represent user menus

Util.py
    - Any other various functions required such as 
        inventory management:
            display_items()
            add_item()
            remove_item()
                - Requries all customers carts to be scanned and inventory updated
                - retrieve all customers
                - loop though each customer and their cart, update item quantity to zero
            update_item_quantity()
                - Make sure item amount is not negative
        
DAO
    -  All needed CRUD operations/queries

    Need queries that:
        Cart:
        - Get all items from database
        - Update a users cart via user_id
        - Add transaction to database
        Account:

        Item:
        - Update an item by item_id
        
        Misc:
        - Add item to database
        - Remove item from database by item_id
        - Retrieve all accounts from database

        - Retrieve all transactions via user_id
        



MODEL    
    Cart.py
        - Class to model user's shopping cart
        - Include user ID
        - Includes dict of {item(object) : quantity} to represent cart
        - Includes dict of {item(object) : quantity} to represent catalog
        - Includes transaction total

        Methods:
            - def __init__(user_id: int, items: dict)
                - takes in user_id, dict of {item_id: quantity}
                - Will query for all items in database, wrap them in item objects and assign to dictionary
                - Will search catalog for all items in cart, copy item object, and assign quantity. Save in dictionary.
                - Will calculate transaction total using dict of {item(object) : quantity} 

            - show_cart()
                - Displays cart in tablular format
                - Prints Total

            - show_catalog()
                - Displays catalog in tabular format

            - calculate_total(items: dict)
                - Takes in a dictionary of items and calculates total cost

            - add_item_to_cart(item_id: int, quantity: int)
                - lookup item in catalog
                    - if does not exist return False
                - Check if quantity exceeds inventory
                    - if so, return False 
                - Add item to cart and assign quantity
                    - Update item in catalog
                    - Update item in database
                    - Update Cart in database
                    - return True if successfully added

            - clear_cart()
                - Update item objects in catalog and update counts in database
                - Erase contents of cart
                - update_cart_in_database (send empty cart)
                - Return True

            - update_item_quantity(item_id: int)
                - Check if item exists in cart
                    - if not, return False
                - if item quanity is zero
                    - update item object and item in database
                    - remove item from cart and update in database
                    - Return True           
                - Check if item count exceeds database count
                    - if so, return False
                - Update Cart and Item inventory both in objects and database
                    - return True

            - check_if_item_exists_in_cart(item_id: int)
                - search dict of items and confirm if it exists

            - check_if_item_exists_in_catalog(item_id: int)
                - Check if exists in catalog
                    if so, return True
                    if not, return False

            - update_cart_in_database
                - Will update cart in database

            - checkout_items()
                - Create transaction object (id, user_id, date, items, total_cost)
                - Clear Cart

    Account.py
        - Class to model user accounts
        - Include:
            - user_id
            - password
            - first_name
            - last_name
            - list of transactions(Query transactions table via user_id) 
            - Shopping Cart Object

    Item.py
        - Class to model an item in the inventory
        - Include:
            - item_id
            - item_name
            - price
            - current_inventory

        Methods:
        def __init__(id: int, name: str, quanity: int, price: float)
        print_item_details()
            - print item details in tabular format
        get_id()
        get_name()
        get_price()
        get_current_inventory()
        set_current_inventory()
        update_item()
            - will update item in database

    Transactions
        - Class to model an item in the inventory
        - Include:
            - transaction_id
            - date
            - list of items (As object/class)
            - total_cost



